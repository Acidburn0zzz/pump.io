#!/usr/bin/env node

// -*- mode: javascript -*-

// show the post activity for an object
//
// Copyright 2014, E14N https://e14n.com/
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var fs = require("fs"),
    path = require("path"),
    util = require("util"),
    urlparse = require("url").parse;

var Step = require("step"),
    _ = require("underscore"),
    Logger = require("bunyan"),
    databank = require("databank"),
    Databank = databank.Databank,
    DatabankObject = databank.DatabankObject,
    argv = require("optimist")
        .usage("Usage: $0 -u <user> -p <password>")
        .demand(["i", "t"])
        .alias("i", "id")
        .alias("t", "type")
        .alias("a", "author")
        .alias("x", "author-type")
        .default("x", "person")
        .describe("i", "ID of the object to fixup the post activity of")
        .describe("t", "Object type")
        .describe("a", "ID of the author or creator of the object")
        .describe("x", "Type of the author or creator of the object")
        .argv,
    id = argv.i,
    type = argv.t,
    author = argv.a,
    authorType = argv.x;

var schema = require("../lib/schema").schema,
    URLMaker = require("../lib/urlmaker").URLMaker,
    User = require("../lib/model/user").User,
    ActivityObject = require("../lib/model/activityobject").ActivityObject,
    Activity = require("../lib/model/activity").Activity;

// Main function

var main = function() {

    var config = getConfig(argv.c),
        log = setupLogger(config),
        object = null,
        act = null;

    log.info("Initializing pump.io");

    URLMaker.hostname = config.hostname;
    URLMaker.port     = (config.urlPort) ? config.urlPort : config.port;

    Step(
        function() {
            log.info("Connecting to databank");
            connectDatabank(config, this);
        },
        function(err) {
            if (err) throw err;
            log.info("Getting the object");
            ActivityObject.getObject(type, id, this);
        },
        function(err, results) {
            if (err) throw err;
            log.info("Getting the activity");
            object = results;
            Activity.postOf(object, this);
        },
        function(err, activity) {
            var newAct;
            if (err) throw err;
            if (activity) throw new Error("Already have a post activity for object " + activity.object.id);
            if (object.author) {
                this(null, object.author);
            } else if (!author) {
                throw new Error("No author specified");
            } else {
                ActivityObject.getObject(author, authorType, this);
            }
        },
        function(err, author) {
            if (err) throw err;
            act = new Activity({
                actor: author,
                verb: "post",
                object: object
            });
            act.ensureRecipients(this);
        },
        function(err) {
            if (err) throw err;
            act.save(this);
        },
        function(err) {
            if (err) {
                console.error(err);
                process.exit(-1);
            } else {
                console.log("Done.");
                process.exit(0);
            }
        }
    );
};

// Gets the configuration vars for this server from config files

var getConfig = function(filename) {
    var files,
        config = {},
        i,
        raw,
        parsed;

    if (filename) {
        files = [filename];
    } else {
        files = ['/etc/pump.io.json',
                 path.join(process.env.HOME, ".pump.io.json")];
    }   

    // This is all sync
    for (i = 0; i < files.length; i++) {
        if (fs.existsSync(files[i])) {
            raw = fs.readFileSync(files[i]);
            try {
                parsed = JSON.parse(raw);
                _.extend(config, parsed);
            } catch (err) {
                console.log(err);
                process.exit(1);
            }
        }
    }

    return config;
};

var connectDatabank = function(config, callback) {

    var params,
        db;

    if (_(config).has("params")) {
        params = config.params;
    } else {
        params = {};
    }

    if (_(params).has("schema")) {
        _.extend(params.schema, schema);
    } else {
        params.schema = schema;
    }

    db = Databank.get(config.driver, params);

    // Connect...

    db.connect({}, function(err) {
        if (err) {
            callback(err, null);
            return;
        }

        DatabankObject.bank = db;
        callback(null, db);
    });
};

var setupLogger = function(config) {
    var log,
        logParams = {
            name: "pump.io",
            component: "pump-show-post-activity"
        };

    if (config.logfile) {
        logParams.streams = [{path: config.logfile}];
    } else if (config.nologger) {
        logParams.streams = [{path: "/dev/null"}];
    } else {
        logParams.streams = [{stream: process.stderr}];
    }

    log = new Logger(logParams);

    return log;
};

main();
