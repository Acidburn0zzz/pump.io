#!/usr/bin/env node

// -*- mode: javascript -*-

// import an activitystreams JSON collection
//
// Copyright 2013, E14N https://e14n.com/
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var fs = require("fs"),
    path = require("path"),
    urlparse = require("url").parse,
    Step = require("step"),
    _ = require("underscore"),
    Logger = require("bunyan"),
    Queue = require("jankyqueue"),
    databank = require("databank"),
    Databank = databank.Databank,
    DatabankObject = databank.DatabankObject,
    randomString = require("../lib/randomstring").randomString,
    Distributor = require("../lib/distributor").Distributor,
    schema = require("../lib/schema").schema,
    Activity = require("../lib/model/activity").Activity,
    Stream = require("../lib/model/stream").Stream,
    ActivityObject = require("../lib/model/activityobject").ActivityObject,
    URLMaker = require("../lib/urlmaker").URLMaker,
    User = require("../lib/model/user").User,
    argv = require("optimist")
        .usage("Usage: $0 -f <collection file>")
        .demand(["f"])
        .alias("f", "file")
        .describe("f", "File in Activity Streams JSON collection format")
        .argv,
    fname = argv.f;

var QUEUE_MAX = 1;

// Connect to databank and start importing activities

var main = function() {
    var config = getConfig(argv.c),
        q = new Queue(QUEUE_MAX),
        log = setupLogger(config);

    log.info("Initializing pump.io");

    URLMaker.hostname = config.hostname;
    URLMaker.port     = (config.urlPort) ? config.urlPort : config.port;

    Step(
        function() {
            log.info("Connecting to databank");
            connectDatabank(config, this);
        },
        function(err, db) {
            if (err) throw err;
            log.info({fname: fname}, "Reading activitystrea.ms file");
            fs.readFile(fname, {encoding: "utf8"}, this);
        },
        function(err, data) {
            if (err) throw err;
            log.info({fname: fname}, "Parsing activitystrea.ms file");
            try {
                this(null, JSON.parse(data));
            } catch (e) {
                this(e, null);
            }
        },
        function(err, collection) {
            var group;
            if (err) throw err;
            log.info({count: collection.items.length}, "Importing activities");
            group = this.group();
            _.each(collection.items, function(item) {
                // Do registration separately
                if (isRegistration(item)) {
                    q.enqueue(registerUser, [item, log], group());
                } else {
                    q.enqueue(importActivity, [item, log], group());
                }
            });
        },
        function(err) {
            if (err) {
                log.error(err);
            } else {
                log.info("Done.");
            }
        }
    );
};

// Gets the configuration vars for this server from config files

var getConfig = function(filename) {
    var files,
        config = {},
        i,
        raw,
        parsed;

    if (filename) {
        files = [filename];
    } else {
        files = ['/etc/pump.io.json',
                 path.join(process.env.HOME, ".pump.io.json")];
    }   

    // This is all sync
    for (i = 0; i < files.length; i++) {
        if (fs.existsSync(files[i])) {
            raw = fs.readFileSync(files[i]);
            try {
                parsed = JSON.parse(raw);
                _.extend(config, parsed);
            } catch (err) {
                console.log(err);
                process.exit(1);
            }
        }
    }

    return config;
};

var connectDatabank = function(config, callback) {

    var params,
        db;

    if (_(config).has("params")) {
        params = config.params;
    } else {
        params = {};
    }

    if (_(params).has("schema")) {
        _.extend(params.schema, schema);
    } else {
        params.schema = schema;
    }

    db = Databank.get(config.driver, params);

    // Connect...

    db.connect({}, function(err) {
        if (err) {
            callback(err, null);
            return;
        }

        DatabankObject.bank = db;
        callback(null, db);
    });
};

var setupLogger = function(config) {
    var log,
        logParams = {
            name: "pump.io",
            component: "pump-import-collection"
        };

    if (config.logfile) {
        logParams.streams = [{path: config.logfile}];
    } else if (config.nologger) {
        logParams.streams = [{path: "/dev/null"}];
    } else {
        logParams.streams = [{stream: process.stderr}];
    }

    log = new Logger(logParams);

    return log;
};

var importActivity = function(props, log, callback) {

    var activity = new Activity(props);

    Step(
        function() {
            log.info({actor: activity.actor.id, object: activity.object.id, verb: activity.verb}, "Localizing objects");
            maybeLocalize(activity.actor, this.parallel());
            maybeLocalize(activity.object, this.parallel());
        },
        function(err, actor, object) {
            if (err) throw err;
            activity.actor = actor;
            activity.object = object;
            log.info({activity: activity.id}, "Ensuring recipients");
            // First, ensure recipients
            activity.ensureRecipients(this);
        },
        function(err) {
            if (err) throw err;
            log.info({activity: activity}, "Applying activity");
            activity.apply(null, this);
        },
        function(err) {
            if (err) throw err;
            log.info({activity: activity}, "Saving activity");
            activity.save(this);
        },
        function(err, saved) {
            if (err) throw err;
            activity = saved;
            log.info({actor: activity.actor.id}, "Checking for user");
            User.fromPerson(activity.actor.id, this);
        },
        function(err, user) {
            if (err) throw err;
            if (!user) {
                log.info({actor: activity.actor.id}, "Not a user");
                this(null);
                return;
            }
            log.info({actor: activity.actor.id, activity: activity.id}, "Adding to outbox");
            user.addToOutbox(activity, this.parallel());
            log.info({actor: activity.actor.id, activity: activity.id}, "Adding to inbox");
            user.addToInbox(activity, this.parallel());
        },
        function(err) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, activity);
            }
        }
    );
};

var isRegistration = function(activity) {
    return (activity.actor &&
            activity.actor.objectType == ActivityObject.PERSON &&
            activity.verb &&
            activity.verb == Activity.JOIN &&
            activity.object &&
            activity.object.objectType == ActivityObject.SERVICE &&
            activity.object.url &&
            urlparse(activity.object.url).hostname == URLMaker.hostname);
};

var registerUser = function(activity, log, callback) {

    var user,
        profile = activity.actor,
        defaultLists = function(user, callback) {
            Step(
                function(err, str) {
                    var lists = ["Friends", "Family", "Acquaintances", "Coworkers"],
                        group = this.group();

                    if (err) throw err;

                    _.each(lists, function(list) {
                        var act = new Activity({
                            actor: user.profile,
                            verb: Activity.CREATE,
                            to: [{objectType: ActivityObject.COLLECTION,
                                  id: user.profile.followers.url}],
                            object: {
                                objectType: ActivityObject.COLLECTION,
                                displayName: list,
                                objectTypes: ["person"]
                            }
                        });
                        act.fire(group());
                    });
                },
                callback
            );
        },
        props;

    if (profile && profile.portablecontacts_net && profile.portablecontacts_net.preferredUsername) {
        props = {
            nickname: profile.portablecontacts_net.preferredUsername
        };
    } else {
        callback(new Error("No discernable nickname"), null);
        return;
    }

    log.info(props, "Registering user");

    Step(
        function() {
            randomString(16, this);
        },
        function(err, str) {
            if (err) throw err;
            props.password = str;
            User.create(props, this);
        },
        function(err, value) {
            if (err) throw err;
            user = value;
            usersStream(this);
        },
        function(err, str) {
            if (err) throw err;
            str.deliver(user.nickname, this);
        },
        function(err) {
            if (err) throw err;
            // copy stuff that's not auto-generated into the profile
            _.defaults(user.profile, profile);
            if (!user.profile.upstreamDuplicates) {
                user.profile.upstreamDuplicates = [];
            }
            user.profile.upstreamDuplicates.push(profile.id);
            user.profile.save(this);
        },
        function(err) {
            if (err) throw err;
            user.expand(this);
        },
        function(err) {
            var svc;
            if (err) throw err;
            defaultLists(user, this);
        },
        function(err) {
            if (err) throw err;
            activity.actor = user.profile;
            importActivity(activity, log, this);
        },
        callback
    );
};

var usersStream = function(callback) {
    
    Step(
        function() {
            Stream.get("user:all", this);
        },
        function(err, str) {
            if (err) {
                if (err.name == "NoSuchThingError") {
                    Stream.create({name: "user:all"}, this);
                } else {
                    throw err;
                }
            } else {
                callback(null, str);
            }
        },
        function(err, str) {
            if (err) {
                if (err.name == "AlreadyExistsError") {
                    Stream.get("user:all", callback);
                } else {
                    callback(err);
                }
            } else {
                callback(null, str);
            }
        }
    );
};

var maybeLocalize = function(object, callback) {
    if (object.objectType == ActivityObject.PERSON) {
        maybeLocalizePerson(object, callback);
    } else {
        callback(null, object);
    }
};

// Given a person, check if they're a user

var maybeLocalizePerson = function(person, callback) {

    var nickname,
        domain,
        id;

    if (person.portablecontacts_net && person.portablecontacts_net.preferredUsername) {
        nickname = person.portablecontacts_net.preferredUsername;
    } else {
        callback(null, person);
        return;
    }

    if (person.url && urlparse(person.url).hostname == URLMaker.hostname) {
        domain = URLMaker.hostname;
    } else {
        callback(null, person);
        return;
    }

    id = "acct:"+nickname+"@"+domain;

    Step(
        function() {
            User.fromPerson(id, this);
        },
        function(err, user) {
            if (err) throw err;
            if (!user) {
                this(null, person);
            } else {
                this(null, user.profile);
            }
        },
        callback
    );
};

// Run the main function

main();
